/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package evoting_distributed_24180_23885.Cliente.Login;

import evoting_24180_23885.Candidato;
import evoting_24180_23885.Hash;
import evoting_distributed_24180_23885.Cliente.Login.BlockchainUtils.RemoteInterface;
import evoting_distributed_24180_23885.Cliente.Login.BlockchainUtils.Vote;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.rmi.server.RMISocketFactory;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import utils.RMI;
import utils.SSLFactoryRMI;

/**
 *
 * @author rodri
 */
public class MainScreen extends javax.swing.JFrame {

    private String loggedUser;
    public ArrayList<Candidato> candidatos = new ArrayList<>();
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
    RemoteInterface remote;
    String address = "192.168.1.236";

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    public MainScreen(String minerAddress) {
        this();
    }

    public void setLoggedUser(String loggedUser) {
        this.loggedUser = loggedUser;

    }

    public String getLoggedUser() {
        return loggedUser;
    }

    public void updateCandidatos(Candidato newCand) {
        // Adiciona o candidato à arraylist candidatos
        for (Candidato c : candidatos) {
            if (newCand.getNome().equals(c.getNome())) {
                System.out.println("JÁ EXISTE");
                return;
            }
        }
        this.candidatos.add(newCand);

        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("Partidos/currentState.partido"))) {
            oos.writeObject(candidatos);
        } catch (Exception err) {
            System.out.println(err.toString());
        }

        model.addElement(newCand.nome);

        // Aplica o modelo à combo box
        candidatosCombo.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        candidatosCombo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Votar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Candidato");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jMenu1.setText("Adicionar Candidato");
        jMenu1.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenu1MenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Terminar Eleição");
        jMenu2.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenu2MenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(candidatosCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(candidatosCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(251, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu1MenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenu1MenuSelected
        // TODO add your handling code here:
        System.out.println(loggedUser);
        if (!"admin".equals(loggedUser)) {
            JOptionPane.showMessageDialog(this,
                    "Precisa de ser administrador para adicionar candidatos",
                    "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            AddCandidato ver = new AddCandidato(this);
            ver.setVisible(true);
            ver.setAlwaysOnTop(true);
            ver.mainWindow = this;
        }
    }//GEN-LAST:event_jMenu1MenuSelected

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            if (RMISocketFactory.getSocketFactory() == null) {
                RMISocketFactory.setSocketFactory(new SSLFactoryRMI());
            }

            remote = (RemoteInterface) RMI.getRemote(address, 10_010, "RemoteMiner");
            setTitle(address);
            onMessage("Connected to ", address);

            HashMap<String, Integer> eleitores;
            // load hashmap de eleitores
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("eleitoresHashMap"))) {
                // lê ficheiro
                eleitores = (HashMap<String, Integer>) ois.readObject();
            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Este utilizador não se encontra no hashmap. Voto não aplicado", "Utilizador inválido", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // não permite o voto se já votou
            if (eleitores.get(Hash.getHash(loggedUser)) == 1) {
                JOptionPane.showMessageDialog(null, "Este utilizador já votou. Voto não aplicado", "Utilizador inválido", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            Vote t = new Vote(
                    Hash.getHash(loggedUser),
                    Hash.getHash(candidatosCombo.getSelectedItem().toString())
            );
            System.out.println(t.toString());
            remote.addTransaction(t.toText());

            // muda o estado do eleitor para mostrar que votou
            eleitores.put(Hash.getHash(loggedUser), 1);

            // gravar de volta no ficheiro de eleitores
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("eleitoresHashMap"))) {
                oos.writeObject(eleitores);
            }

            handlePartyVoteCount(loggedUser, candidatosCombo.getSelectedItem().toString());
        } catch (Exception ex) {
            onException("Add Transaction", ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenu2MenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenu2MenuSelected
        try {
            // TODO add your handling code here:
            displayResults();
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenu2MenuSelected

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    public void loadCandidatos() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("Partidos/currentState.partido"))) {
            candidatos = (ArrayList<Candidato>) ois.readObject();
            for (Candidato c : candidatos) {
                model.addElement(c.nome);
                System.out.println(c.getNome() + "->" + c.getNumeroVotos());
            }
            candidatosCombo.setModel(model);
        } catch (Exception err) {
            System.out.println(err.toString());
        }
    }

    public void onException(String title, Exception ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage(),
                title, JOptionPane.ERROR_MESSAGE);
        Logger.getAnonymousLogger().log(Level.SEVERE, null, ex);
    }

    public void onMessage(String title, String msg) {
    }

    public void handlePartyVoteCount(String eleitorId, String candidato) throws IOException, ClassNotFoundException {
        Map<String, Integer> hashedVotes;

        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("votosHashMap"))) {
            // lê ficheiro
            hashedVotes = (HashMap<String, Integer>) ois.readObject();
        } catch (FileNotFoundException e) {
            hashedVotes = new HashMap<>();
        }

        // Update the count for the party
        hashedVotes.put(candidato, hashedVotes.getOrDefault(candidato, 0) + 1);

        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("votosHashMap"))) {
            System.out.println("escreveu hashmap");
            oos.writeObject(hashedVotes);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void displayResults() throws IOException, ClassNotFoundException {

        Map<String, Integer> hashedVotes;

        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("votosHashMap"))) {
            // lê ficheiro
            hashedVotes = (HashMap<String, Integer>) ois.readObject();
        } catch (FileNotFoundException e) {
            hashedVotes = new HashMap<>();
        }

        System.out.println("Party-wise Vote Count:");
        StringBuilder results = new StringBuilder();

        for (Map.Entry<String, Integer> entry : hashedVotes.entrySet()) {
            results.append(entry.getKey()).append(": ").append(entry.getValue()).append(" votes\n");
        }
        JOptionPane.showMessageDialog(null, results.toString(), "Contagem de Votos", JOptionPane.INFORMATION_MESSAGE);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> candidatosCombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
