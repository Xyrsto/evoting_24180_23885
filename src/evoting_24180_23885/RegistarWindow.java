/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package evoting_24180_23885;

import evoting_24180_23885.SecurityUtils.Assimetric;
import evoting_24180_23885.SecurityUtils.PasswordBasedEncryption;
import evoting_24180_23885.SecurityUtils.Simetric;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.KeyPair;
import java.sql.Timestamp;
import java.util.ArrayList;

/**
 * Janela de Registo que permite aos eleitores registarem-se no sistema. Esta
 * janela é utilizada para inserir o número do cartão de cidadão e a
 * palavra-passe do eleitor. Os eleitores são então registados no sistema e as
 * suas informações são guardadas numa blockchain.
 */
public class RegistarWindow extends javax.swing.JFrame {

    /**
     *
     */
    public MainScreen mainWindow;
    private BlockChain eleitoresChain = new BlockChain();

    /**
     *
     */
    public ArrayList<Object> list = new ArrayList<>();
    private final int DIFFICULTY = 5;

    /**
     * Creates new form LoginWindow
     */
    public RegistarWindow() {
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CCField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        PasswordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Registar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Número do cartão de cidadão");

        jLabel2.setText("Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(52, 52, 52)
                            .addComponent(jLabel2))
                        .addComponent(PasswordField)
                        .addComponent(CCField)))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CCField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButton1)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String regex = "\\d{8}";
            if (!CCField.getText().matches(regex)) {
                CCField.setText("Só pode conter 8 números");
                return;
            }
            Users.register(CCField.getText(), PasswordField.getText());
            Eleitor newEleitor = new Eleitor(CCField.getText(), PasswordField.getText(), false);
            Eleitor.saveVote(CCField.getText());
            mainWindow.eleitoresList.add(newEleitor);
            saveEleitor(mainWindow.eleitoresList);

            if (mainWindow.eleitoresList.size() <= 10) {
                if (mainWindow.eleitoresList.size() < 10) {
                    return;
                }
                //builds a merkle tree with whats added on the elements.
                MerkleTreeString merkleTree = new MerkleTreeString(mainWindow.eleitoresList);

                list.add(mainWindow.eleitoresList);
                list.add(merkleTree);

                Timestamp timestamp = new Timestamp(System.currentTimeMillis());

                try (FileOutputStream fos = new FileOutputStream("eleitores/eleitoresList" + merkleTree.getRoot() + ".obj"); ObjectOutputStream oos = new ObjectOutputStream(fos);) {
                    oos.writeObject(list);

                } catch (Exception e) {
                    System.out.println("erro");
                    throw new RuntimeException(e);
                }
                eleitoresChain.add(merkleTree.getRoot(), DIFFICULTY);
                eleitoresChain.save("Blockchains/eleitoresBlockChain.obj");
                list.clear();
            }
        } catch (Exception err) {
            System.out.println(err.toString());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Guarda as informações do eleitor num arquivo.
     *
     * @param eleitores A lista de eleitores.
     */
    public void saveEleitor(ArrayList<Object> eleitores) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("eleitores/eleitoresList.list"))) {
            oos.writeObject(eleitores);
        } catch (Exception err) {
            System.out.println(err.toString());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistarWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistarWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistarWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistarWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistarWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CCField;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
